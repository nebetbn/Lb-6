#include <iostream>
#include <vector>
#include <algorithm>

const int MAXN = 100005;
const int LOGN = 17; // ceil(log2(MAXN))

std::vector<int> adj[MAXN];
int p[MAXN];
int z[MAXN];
int depth[MAXN];
int up[MAXN][LOGN];
int n;

void dfs(int v, int parent, int d) {
    depth[v] = d;
    up[v][0] = parent;
    for (int i = 1; i < LOGN; ++i) {
        up[v][i] = up[up[v][i - 1]][i - 1];
    }
    for (int u : adj[v]) {
        if (u != parent) {
            dfs(u, v, d + 1);
        }
    }
}

bool is_ancestor(int u, int v) {
    if (u == 0) return true; // 0 is an ancestor of all nodes
    if (depth[u] >= depth[v]) return false;
    
    int k = depth[v] - depth[u];
    for (int i = 0; i < LOGN; ++i) {
        if ((k >> i) & 1) {
            v = up[v][i];
        }
    }
    return u == v;
}

// Checks if z[i] can be at least k
bool check(int i, int k) {
    if (k == 0) return true;
    if (i + k > n) return false;
    // Check if k is a border of s[0...i+k-2], which means
    // k is an ancestor of node i+k-1+1 = i+k in the border tree.
    return is_ancestor(k, i + k);
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    std::cin >> n;
    p[0] = 0; // p[0] is always 0
    // The problem states input is an array of n elements, p[0]...p[n-1]
    for (int i = 0; i < n; ++i) {
        std::cin >> p[i];
    }

    // Build border tree: parent of node i+1 is p[i]
    for (int i = 0; i < n; ++i) {
        adj[p[i]].push_back(i + 1);
    }

    // Preprocess for LCA
    dfs(0, 0, 0);

    z[0] = 0; // As per problem definition
    for (int i = 1; i < n; ++i) {
        // Binary search for the value of z[i]
        int low = 0, high = n - i, ans = 0;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (check(i, mid)) {
                ans = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        z[i] = ans;
    }

    for (int i = 0; i < n; ++i) {
        std::cout << z[i] << (i == n - 1 ? "" : " ");
    }
    std::cout << std::endl;

    return 0;
}
